{"version":3,"sources":["index.js"],"names":["http","require","server","createServer","req","res","now","Date","console","info","connection","remoteAddress","writeHead","method","write","url","fs","rs","createReadStream","pipe","rawData","on","chunk","decoded","decodeURIComponent","end","e","error","port","listen"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB,EACA;AACA;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,MAAM,GAAGF,IAAI,CAACG,YAAL,CAAkB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3C;AACA;;AACA;;;;;;AAMA,QAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACAC,EAAAA,OAAO,CAACC,IAAR,CAAa,MAAMH,GAAN,GAAY,iBAAZ,GAAgCF,GAAG,CAACM,UAAJ,CAAeC,aAA5D,EAV2C,CAY3C;AACA;AACA;;AACAN,EAAAA,GAAG,CAACO,SAAJ,CAAc,GAAd,EAAmB;AACf,oBAAgB;AADD,GAAnB,EAf2C,CAmB3C;AACA;;AACA,UAAQR,GAAG,CAACS,MAAZ;AACI,SAAK,KAAL;AACIR,MAAAA,GAAG,CAACS,KAAJ,CAAU,SAASV,GAAG,CAACW,GAAvB;;AACA,YAAMC,EAAE,GAAGf,OAAO,CAAC,IAAD,CAAlB;;AACA,YAAMgB,EAAE,GAAGD,EAAE,CAACE,gBAAH,CAAoB,aAApB,CAAX,CAHJ,CAII;AACA;AACA;AACA;;AACAD,MAAAA,EAAE,CAACE,IAAH,CAAQd,GAAR;AACA;;AAEJ,SAAK,MAAL;AACI,UAAIe,OAAO,GAAG,EAAd;AACAhB,MAAAA,GAAG,CAACiB,EAAJ,CAAO,MAAP,EAAgBC,KAAD,IAAW;AACtBF,QAAAA,OAAO,GAAGA,OAAO,GAAGE,KAApB;AACH,OAFD,EAEGD,EAFH,CAEM,KAFN,EAEa,MAAM;AACf,cAAME,OAAO,GAAGC,kBAAkB,CAACJ,OAAD,CAAlC;AACAZ,QAAAA,OAAO,CAACC,IAAR,CAAa,MAAMH,GAAN,GAAY,OAAZ,GAAsBiB,OAAnC;AACAlB,QAAAA,GAAG,CAACS,KAAJ,CAAU,+CAA+CS,OAA/C,GAAyD,6BAAnE,EAHe,CAIf;;AACAlB,QAAAA,GAAG,CAACoB,GAAJ;AACH,OARD;AASAjB,MAAAA,OAAO,CAACC,IAAR,CAAa,gBAAb;AACA;;AACJ,SAAK,QAAL;AACIJ,MAAAA,GAAG,CAACS,KAAJ,CAAU,WAAWV,GAAG,CAACW,GAAzB;AACA;;AACJ;AACIP,MAAAA,OAAO,CAACC,IAAR,CAAa,YAAb;AACA;AA9BR;;AA+BC;AACJ,CArDc,EAqDZY,EArDY,CAqDT,OArDS,EAqDCK,CAAD,IAAO;AAClBlB,EAAAA,OAAO,CAACmB,KAAR,CAAc,MAAK,IAAIpB,IAAJ,EAAL,GAAkB,gBAAhC,EAAkDmB,CAAlD;AACH,CAvDc,EAuDZL,EAvDY,CAuDT,aAvDS,EAuDOK,CAAD,IAAO;AACxBlB,EAAAA,OAAO,CAACmB,KAAR,CAAc,MAAK,IAAIpB,IAAJ,EAAL,GAAkB,gBAAhC,EAAkDmB,CAAlD;AACH,CAzDc,CAAf;AA2DA,MAAME,IAAI,GAAG,IAAb,EACA;AACA;AACA;;AACA1B,MAAM,CAAC2B,MAAP,CAAcD,IAAd,EAAoB,MAAM;AACtBpB,EAAAA,OAAO,CAACC,IAAR,CAAa,iBAAiB,IAAIF,IAAJ,EAAjB,GAA8BqB,IAA3C;AACH,CAFD","file":"index.js","sourceRoot":"../../src/14","sourcesContent":["'use strict';\nconst http = require('http');\n//ドキュメント　http.createServer(requestListener);\n//https://www.w3schools.com/nodejs/met_http_createserver.asp\n\n//requestListener\n//https://www.w3schools.com/nodejs/func_http_requestlistener.asp\n//無名関数は、サーバーにリクエストがあった際に呼び出されます。\n//HTTP サーバーがイベントを発行する存在として 作られているため\nconst server = http.createServer((req, res) => {\n    //req.connection.remoteAddress 接続元のIPアドレスを取得できる\n    //console.info 情報のログをコンソールに出力する関数\n    /**\n     * メモ\n     * info:情報。普段から残しておきたい情報に使う。 標準出力\n     * warn:警告。問題となる可能性がある情報に使う。 エラー標準出力\n     * error:エラー。直ちに対応が必要な情報に使う。 エラー標準出力\n     */\n    const now = new Date()\n    console.info('[' + now + '] Requested by ' + req.connection.remoteAddress);\n\n    //writeHead(statusCode: number, reasonPhrase?: string, headers?: OutgoingHttpHeaders): ServerResponse\n    //内容の形式 Content-Type が、text/plain という通常のテキストであるという情報\n    //文字セット charset が utf-8 であるという情報\n    res.writeHead(200, {\n        'content-Type': 'text/html; charset=utf-8'\n    });\n    \n    // メソッドによって分岐させている\n    //GETでアクセスした時にアンケートフォームを表示させる\n    switch (req.method) {\n        case 'GET':\n            res.write('GET ' + req.url);\n            const fs = require('fs');\n            const rs = fs.createReadStream('./form.html');\n            //パイプをしている\n            //Node.js では Stream の形式のデータは、読み込み用の Stream と書き込み用の Stream を繋いで そのままデータを受け渡すことができる。 \n            //その関数が pipe という関数の機能\n            //HTTP のレスポンスのコンテンツとしてファイルの内容をそのまま 返す。\n            rs.pipe(res);\n            break;\n\n        case 'POST':\n            let rawData = '';\n            req.on('data', (chunk) => {\n                rawData = rawData + chunk;\n            }).on('end', () => {\n                const decoded = decodeURIComponent(rawData);\n                console.info('[' + now + '] 投稿:' + decoded);\n                res.write('<!DOCTYPE html> <html lang=\"ja\"><body><h1>' + decoded + 'が投稿されました</h1></body></html>');\n                //POST メソッドを使った場合のみ res.end を行うようにする\n                res.end();\n            });\n            console.info('/////POST/////');\n            break;\n        case 'DELETE':\n            res.write('DELETE' + req.url);\n            break;\n        default:\n            console.info('//////////');\n            break;\n    };\n}).on('error', (e) => {\n    console.error('['+ new Date() + '] Server Error', e);\n}).on('clientError', (e) => {\n    console.error('['+ new Date() + '] Server Error', e);\n});\n\nconst port = 8000;\n//最後のこのコードは、この HTTP が起動するポートを宣言し、\n// そしてサーバーを起動して、起動した際に実行する関数を渡しています。\n//listen(port?: number, hostname?: string, backlog?: number, listeningListener?: () => void): Server\nserver.listen(port, () => {\n    console.info('listening on' + new Date() + port);\n});"]}