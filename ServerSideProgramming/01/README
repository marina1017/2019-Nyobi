webフレームワークの機能

ルーティング機能
プロジェクトのひな形の作成機能
セキュリティ対策機能
ログ出力を補助する機能
認証認可機能
フレームワーク自体を拡張する機能
テンプレートエンジン

コマンド
$yarn global add express-generator@4.16.0
$cd ~/workspace
$express --view=pug 01

記のように表示され、 Express を使ったアプリケーションに必要なファイルが一通り作成されます。
なお、express --view=pug express-study のコマンドの部分は
 express-study という名前のプロジェクトを作成し、 テンプレートエンジンに pug を使用するコマンドです。

$cd 01
$yarn install


起動の仕方
$DEBUG=express-study:* PORT=8000 yarn start
だがなんかうまく行かないのでyarn startにしている

DEBUG=express-study:* は「アプリケーション固有のデバッグログを表示させる」ために設定しています。
express-study:* という書き方で、「 express-study: で始まる文字列が設定されたログを全て出力する」設定になります。 この * はワイルドカードといい、どのような文字列にもマッチする文字という意味を持っています。

PORT=8000 は、「このサーバーを 8000 番ポートで起動する」目的で設定

※なんかうまくいかないので bin/wwwファイルを書き換えて8000で起動するようにした
コマンドはyarn startだけ

app.js は、 Web アプリケーション自体を表すモジュールが記述された JavaScript のファイルです。 アプリケーションの動きを変更する際の実装は、ここを起点に実装されています。

bin/www は、起動を行うための Node.js のスクリプトとなっています。 このスクリプトにおいて app モジュールが読み込まれています。

package.json は npm パッケージの様々な設定が書いてある JSON ファイルです。 おなじみですね。

public ディレクトリには、画像や、クライアント側で用いる JavaScript、 CSS などの 静的ファイルが格納されます。デフォルトでは style.css のみが格納されています。

routes ディレクトリは、 この Express でルーティングを担うオブジェクトである Router オブジェクトの実装がされたモジュールのファイルが置かれるディレクトリ となります。

views ディレクトリには、 pug というテンプレートエンジンの、 テンプレートファイルが置かれています。